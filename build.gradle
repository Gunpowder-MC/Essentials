plugins {
    id 'java'
    id 'maven-publish'
    id 'net.minecrell.licenser' version "$licenser"
    id 'fabric-loom' version "$fabric_loom" apply false
    id 'org.jetbrains.kotlin.jvm' version "$kotlin"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "org.jetbrains.dokka" version "1.4.0-rc"
}

apply from: "dependencies.gradle"  // libs.*

logger.lifecycle("""
    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    Building Gunpowder
    Version: $project.mod_version
    Minecraft Version: $project.minecraft
    Fabric-Loader Version: $project.fabric_loader

    Using:
    Fabric-API Version: $project.fabric_api
    PlayerAbilityLib Version: $project.playerabilitylib
    
    Output files will be in /build/libs
    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
""")


group = "io.github.gunpowder"
version = project.mod_version + "+" + project.minecraft

// Project config

allprojects { project ->
    apply plugin: 'fabric-loom'
    apply plugin: 'maven-publish'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'net.minecrell.licenser'
    apply plugin: 'com.github.johnrengelman.shadow'

    project.version = rootProject.version
    project.group = rootProject.group
    project.setBuildDir(rootProject.getBuildDir())

    license {
        header = rootProject.file('LICENSE')
        include '**/*.java'
        include '**/*.kt'
        style.java = 'BLOCK_COMMENT'
        style.kt = 'BLOCK_COMMENT'
    }

    configurations {
        dev
        compile.extendsFrom shade
        modCompile.extendsFrom modShade
    }

    jar {
        enabled = false
    }

    remapJar {
        enabled = false
    }

    shadowJar {
        enabled = true
        // Only shadow implementation/modImplementation
        configurations = [project.configurations.shade]
        classifier = "dev"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from project.sourceSets.main.allSource.srcDirs
    }

    task remapShadowJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: shadowJar) {
        afterEvaluate {
            input = file("${project.buildDir}/libs/${archivesBaseName}-${rootProject.version}-dev.jar")
            archiveName = "${project.archivesBaseName}-${project.version}.jar"
            addNestedDependencies = true
            remapAccessWidener = true
        }
    }

    task remapMavenJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: shadowJar) {
        afterEvaluate {
            input = file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}-dev.jar")
            archiveName = "${project.archivesBaseName}-${project.version}-maven.jar"
            addNestedDependencies = false
            remapAccessWidener = true
        }
    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "Jitpack"
            url = "https://jitpack.io"
        }
        maven {
            name = "Ladysnake Libs"
            url = "https://dl.bintray.com/ladysnake/libs"
        }
    }

    dependencies {
        // Kotlin Stdlib
        implementation libs.kotlin_stdlib

        minecraft(libs.minecraft) {
            transitive = false
        }
        mappings libs.yarn
        modImplementation libs.fabric_loader

        // Hard Dependencies
        modImplementation libs.fabric_api
        modImplementation libs.fabric_language_kotlin

        // Database
        implementation libs.exposed_core
        implementation libs.exposed_jdbc
        implementation libs.exposed_java_time

        // Database drivers
        implementation libs.postgresql
        implementation libs.mysql_connector_java
        implementation libs.sqlite_jdbc

        // Configs
        implementation libs.jackson_core
        implementation libs.jackson_kotlin
        implementation libs.jackson_yaml

        // Dependency Injection
        implementation libs.guice

        // We use checker for annotations
        implementation libs.checker_qual

        // TODO: Permissions
    }

    // Set version in fabric.mod.json
    processResources {
        inputs.property "version", project.version

        from(project.sourceSets.main.resources.srcDirs) {
            include "fabric.mod.json"
            expand "version": project.version
        }

        from(project.sourceSets.main.resources.srcDirs) {
            exclude "fabric.mod.json"
        }
    }

    build.dependsOn(shadowJar, remapShadowJar, sourcesJar, remapSourcesJar)
    publish.dependsOn(shadowJar, remapMavenJar, sourcesJar, remapSourcesJar)

    // Fix some warnings
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    compileKotlin.kotlinOptions.jvmTarget = "1.8"
}

dependencies {
    afterEvaluate {
        subprojects.each {
            shade project(path: ":${it.name}", configuration: 'shadow')
        }
    }

    // Runtime Only Dependencies
    modRuntime(libs.modmenu) {
        transitive = false // Naughty mods who JIJ fabric api
    }
    modRuntime(libs.playerabilitylib) {
        transitive = false
    }
}

subprojects {
    runClient {
        enabled = false
    }
    runServer {
        enabled = false
    }
}

jar {
    enabled = false
}

sourcesJar {
    enabled = false
}

shadowJar {
    enabled = false
}

remapJar {
    enabled = false
}

remapSourcesJar {
    enabled = false
}

remapShadowJar {
    enabled = false
}

remapMavenJar {
    enabled = false
}

if (file('secrets.gradle').exists()) {
    apply from: 'secrets.gradle'
    // project.ext.apiKey = cf token
    // project.ext.mavenToken = maven token

    // Maven publish
    subprojects { p ->
        publishing {
            repositories {
                maven {
                    url = "https://maven.martmists.com/releases"
                    credentials {
                        username = 'admin'
                        password = project.mavenToken
                    }
                }
            }

            publications {
                mavenJava(MavenPublication) {
                    afterEvaluate {
                        artifact source: file("${p.buildDir}/libs/${p.name}-${rootProject.version}-maven.jar"), classifier: ''
                        artifact source: file("${p.buildDir}/libs/${p.name}-${rootProject.version}-dev.jar"), classifier: 'dev'
                        artifact source: file("${p.buildDir}/libs/${p.name}-${rootProject.version}-sources.jar"), classifier: 'sources'
                        artifact source: file("${p.buildDir}/libs/${p.name}-${rootProject.version}-sources-dev.jar"), classifier: 'sources-dev'
                    }
                }
            }
        }
    }

    // Curseforge upload
    curseforge {

        apiKey = project.apiKey
        project {
            id = "350123"
            releaseType = "release"
            changelogType = "markdown"
            changelog = file("CHANGELOG.md").readLines().join("\n").split("---")[0]
            addGameVersion project.minecraft
            addGameVersion "Fabric"
            addGameVersion "Java 8"

            mainArtifact file("${project.buildDir}/libs/gunpowder-base-${project.version}.jar")

            afterEvaluate {
                uploadTask.dependsOn(":gunpowder-base:remapShadowJar")
            }
        }
        options {
            forgeGradleIntegration = false
        }
    }

}

