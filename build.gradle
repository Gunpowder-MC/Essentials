import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'java'
    id 'maven-publish'
    id 'net.minecrell.licenser' version "$licenser"
    id 'fabric-loom' version "$fabric_loom" apply false
    id 'org.jetbrains.kotlin.jvm' version "$kotlin"
    id 'com.github.johnrengelman.shadow' version "$shadow"
}

apply from: "dependencies.gradle"
// apply from: "https://github.com/FabricMC/fabric-docs/raw/master/gradle/ideconfig.gradle"

logger.lifecycle("""
	=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
	Building Essentials
	Version: $project.mod_version
	Minecraft Version: $project.minecraft
	Fabric-Loader Version: $project.fabric_loader

	Using:
	Fabric-API Version: $project.fabric_api
	PlayerAbilityLib Version: $project.playerabilitylib
	
	Output files will be in /build/libs
	=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
""")

configurations {
    shade
    compile.extendsFrom shade
}

shadowJar {
    archiveFileName = 'essentials-dev.jar'
    configurations = [project.configurations.shade]
}

version = project.mod_version + "+" + project.minecraft

allprojects {
    apply plugin: 'fabric-loom'
    apply plugin: 'maven-publish'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'net.minecrell.licenser'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    group = "io.github.nyliummc.essentials"
    version = project.mod_version + "+" + project.minecraft

    // TODO: Set Built artifacts to output to the proper place
    // setBuildDir(project.rootDir.absolutePath + "/build")

    configurations {
        dev
    }

    license {
        header = rootProject.file('LICENSE')
        include '**/*.java'
        include '**/*.kt'
        style.java = 'BLOCK_COMMENT'
        style.kt = 'BLOCK_COMMENT'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "Ladysnake Libs"
            url = "https://dl.bintray.com/ladysnake/libs"
        }
        maven {
            name = "pex-repo"
            url = "https://repo.glaremasters.me/repository/permissionsex/"
        }
        maven {
            name = "Sponge Repo"
            url = "https://repo.spongepowered.org/maven"
        }
    }

    dependencies {
        // Kotlin Stdlib
        implementation libs.kotlin_stdlib

        minecraft libs.minecraft
        mappings libs.yarn
        modImplementation libs.fabric_loader

        // Hard Dependencies
        modImplementation libs.fabric_api
        modImplementation(include(libs.playerabilitylib)) { transitive = false }

        // Database
        implementation libs.exposed_core
        implementation libs.exposed_jdbc
        implementation libs.exposed_java_time

        // Database drivers
        implementation libs.postgresql
        implementation libs.mysql_connector_java
        implementation libs.sqlite_jdbc

        // Configs
        implementation libs.jackson_core
        implementation libs.jackson_kotlin
        implementation libs.jackson_yaml

        // Dependency Injection
        implementation libs.guice

        // We use checker for annotations
        compileOnly libs.checker_qual

        // TODO: Permissions
    }

    jar {
        classifier = "dev"
        from "LICENSE"
    }

    afterEvaluate {
        remapJar {
            input = file("${project.buildDir}/libs/$archivesBaseName-${project.version}-dev.jar")
            archiveName = "${archivesBaseName}-${project.version}.jar"
        }

        artifacts {
            dev file: file("${project.buildDir}/libs/$archivesBaseName-${project.version}-dev.jar"), type: "jar", builtBy: jar
        }

        processResources {
            inputs.property "version", project.version

            from(sourceSets.main.resources.srcDirs) {
                include "fabric.mod.json"
                expand "version": project.version
            }

            from(sourceSets.main.resources.srcDirs) {
                exclude "fabric.mod.json"
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    compileKotlin.kotlinOptions.jvmTarget = "1.8"
}

task licenseFormatAll
subprojects { p -> licenseFormatAll.dependsOn("${p.path}:licenseFormat") }
subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }

dependencies {
    afterEvaluate {
        subprojects.each {
            shade project(path: ":${it.name}", configuration: "dev")
        }
    }

    // Runtime Only Dependencies
    modRuntime(libs.modmenu) {
        transitive = false // Naughty mods who JIJ fabric api
    }
}

jar {
    from "LICENSE"
}

task remappedShadowJar(type: RemapJarTask) {
    dependsOn tasks.shadowJar
    input = tasks.shadowJar.archivePath
    addNestedDependencies = true
    archiveName = "essentials-${project.version}.jar"
}

tasks.assemble.dependsOn tasks.remappedShadowJar

artifacts {
    archives remappedShadowJar
    shadow shadowJar
}
