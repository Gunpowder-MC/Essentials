plugins {
    id 'java'
    id 'maven-publish'
    id 'net.minecrell.licenser' version "$licenser"
    id 'fabric-loom' version "$fabric_loom" apply false
    id 'org.jetbrains.kotlin.jvm' version "$kotlin"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.dorongold.task-tree" version "1.5"
}

apply from: "dependencies.gradle"  // libs.*

logger.lifecycle("""
    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    Building Gunpowder
    Version: $project.mod_version
    Minecraft Version: $project.minecraft
    Fabric-Loader Version: $project.fabric_loader

    Using:
    Fabric-API Version: $project.fabric_api
    PlayerAbilityLib Version: $project.playerabilitylib
    
    Output files will be in /build/libs
    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
""")

version = project.mod_version + "+" + project.minecraft

// Project config

allprojects { currentProject ->
    apply plugin: 'fabric-loom'
    apply plugin: 'maven-publish'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'net.minecrell.licenser'
    apply plugin: 'com.github.johnrengelman.shadow'

    task remapShadowJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: shadowJar) {
        afterEvaluate {
            input = file("${project.buildDir}/libs/${archivesBaseName}-${version}-dev.jar")
            archiveName = "${archivesBaseName}-${version}.jar"
            addNestedDependencies = true
            remapAccessWidener = true
        }
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    group = "io.github.gunpowder"
    version = project.mod_version + "+" + project.minecraft

    setBuildDir(rootProject.getBuildDir())

    configurations {
        dev
        compile.extendsFrom shade
        modCompile.extendsFrom modShade
    }

    license {
        header = rootProject.file('LICENSE')
        include '**/*.java'
        include '**/*.kt'
        style.java = 'BLOCK_COMMENT'
        style.kt = 'BLOCK_COMMENT'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "Jitpack"
            url = "https://jitpack.io"
        }
        maven {
            name = "Ladysnake Libs"
            url = "https://dl.bintray.com/ladysnake/libs"
        }
    }

    dependencies {
        // Kotlin Stdlib
        compileOnly libs.kotlin_stdlib

        minecraft(libs.minecraft) {
            transitive = false
        }
        mappings libs.yarn
        modImplementation libs.fabric_loader

        // Hard Dependencies
        modImplementation libs.fabric_api
        modImplementation libs.fabric_language_kotlin

        // Database
        implementation libs.exposed_core
        implementation libs.exposed_jdbc
        implementation libs.exposed_java_time

        // Database drivers
        implementation libs.postgresql
        implementation libs.mysql_connector_java
        implementation libs.sqlite_jdbc

        // Configs
        implementation libs.jackson_core
        implementation libs.jackson_kotlin
        implementation libs.jackson_yaml

        // Dependency Injection
        implementation libs.guice

        // We use checker for annotations
        implementation libs.checker_qual

        // TODO: Permissions
    }

    // Jars

    if (currentProject.name.contains("-api")) {
        jar {
            classifier = ""
        }

        shadowJar {
            enabled = false
        }

        remapJar {
            enabled = false
        }
    } else {
        jar {
            enabled = false
            classifier = "dev"

            doLast {
                delete fileTree("${project.buildDir}/") {
                    include "classes/java/main/*refmap*.json"
                    include "classes/java/**/*"
                }
            }
        }

        // TODO: Delete jar if present

        shadowJar {
            enabled = true
            // Only shadow implementation/modImplementation
            configurations = [project.configurations.shade]
            classifier = "dev"
        }

        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from currentProject.sourceSets.main.allSource.srcDirs
        }

        task remapMavenJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: jar) {
            afterEvaluate {
                input = file("${project.buildDir}/libs/${archivesBaseName}-${version}-dev.jar")
                archiveName = "${archivesBaseName}-${version}-maven.jar"
                addNestedDependencies = false
            }
        }

        remapJar {
            enabled = false
        }

        remapShadowJar {

        }

        remapSourcesJar {
            doLast {
                delete fileTree("${project.buildDir}/") {
                    include "resources/**/*.json"
                    include "resources/**/*.yaml"
                    include "resources/**/*.accesswidener"
                    include "classes/java/main/*refmap*.json"
                    include "classes/java/**/*"
                }
            }
        }
    }

    // Set version in fabric.mod.json
    processResources {
        inputs.property "version", project.version

        from(currentProject.sourceSets.main.resources.srcDirs) {
            include "fabric.mod.json"
            expand "version": project.version
        }

        from(currentProject.sourceSets.main.resources.srcDirs) {
            exclude "fabric.mod.json"
            include "*.json"
            include "*.yaml"
            include "*.accesswidener"
        }
    }

    // Fix some kotlin warnings
    compileKotlin.kotlinOptions.jvmTarget = "1.8"
}

// License shit

task licenseFormatAll
subprojects { p -> licenseFormatAll.dependsOn("${p.path}:licenseFormat") }

subprojects {
    runClient {
        enabled = false
    }
    runServer {
        enabled = false
    }
}

// Build oddities

Task last = null
for (Project it : subprojects) {
    if (!it.name.contains("-api")) {
        if (last != null) {
            // Ignore this shit, it makes it all work
            it.compileKotlin.dependsOn(last)
        }
        it.shadowJar.dependsOn(it.compileJava)
        it.shadowJar.dependsOn(it.compileKotlin)
        it.shadowJar.dependsOn(it.processResources)
        it.sourcesJar.dependsOn(it.shadowJar)
        it.remapShadowJar.dependsOn(it.remapMavenJar)
        it.remapShadowJar.dependsOn(it.sourcesJar)
        it.remapSourcesJar.dependsOn(it.remapShadowJar)
        last = it.remapSourcesJar as Task
    }
}
build.dependsOn(last)

dependencies {
    afterEvaluate {
        subprojects.each {
            shade project(path: ":${it.name}", configuration: 'shadow')
        }
    }

    // Runtime Only Dependencies
    modRuntime(libs.modmenu) {
        transitive = false // Naughty mods who JIJ fabric api
    }
    modRuntime(libs.playerabilitylib) {
        transitive = false
    }
}

// Fat jar

jar {
    enabled = false
}

sourcesJar {
    enabled = false
}

shadowJar {
    enabled = false
    // Only shadow implementation/modImplementation
    configurations = [project.configurations.shade]
    classifier = "dev"
    //append "src/main/resources/fabric.mod.json"
}

remapJar {
    enabled = false
}

remapShadowJar {
    enabled = false
}

remapSourcesJar {
    enabled = false
}

if (file('secrets.gradle').exists()) {
    apply from: 'secrets.gradle'
    // project.ext.apiKey = cf token
    // project.ext.mavenToken = maven token

    // Maven publish
    subprojects { p ->
        publishing {
            repositories {
                maven {
                    url = "https://maven.martmists.com/releases"
                    credentials {
                        username = 'admin'
                        password = project.mavenToken
                    }
                }
            }

            publications {
                mavenJava(MavenPublication) {
                    afterEvaluate {
                        if (p.name.contains("-api")) {
                            artifact source: file("${p.buildDir}/libs/${p.name}-${p.version}-dev.jar"), classifier: ''
                        } else {
                            artifact source: file("${p.buildDir}/libs/${p.name}-${p.version}-maven.jar"), classifier: ''
                            artifact source: file("${p.buildDir}/libs/${p.name}-${p.version}-dev.jar"), classifier: 'dev'
                            artifact source: file("${p.buildDir}/libs/${p.name}-${p.version}-sources.jar"), classifier: 'sources'
                            artifact source: file("${p.buildDir}/libs/${p.name}-${p.version}-sources-dev.jar"), classifier: 'sources-dev'
                        }
                    }
                }
            }
        }
    }

    // Curseforge upload
    curseforge {

        apiKey = project.apiKey
        project {
            id = "350123"
            releaseType = "release"
            changelogType = "markdown"
            changelog = file("CHANGELOG.md").readLines().join("\n").split("---")[0]
            addGameVersion project.minecraft
            addGameVersion "Fabric"
            addGameVersion "Java 8"

            subprojects { sub ->
                // Add built modules
                if (sub.name.contains("-base")) {
                    mainArtifact file("${project.buildDir}/libs/$sub.archivesBaseName-${project.version}.jar")
                } else if (sub.name.contains("-api")) {
                    // Do nothing
                } else {
                    addArtifact file("${project.buildDir}/libs/$sub.archivesBaseName-${project.version}.jar")
                }
            }

            afterEvaluate {
                uploadTask.dependsOn(remapJar)
            }
        }
        options {
            forgeGradleIntegration = false
        }
    }

}

