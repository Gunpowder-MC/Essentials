plugins {
    id 'java'
    id 'maven-publish'
//    id 'org.cadixdev.licenser' version "$licenser"
    id 'fabric-loom' version "$fabric_loom" apply false
    id 'org.jetbrains.kotlin.jvm' version "$kotlin"
    id "com.github.johnrengelman.shadow" version "$shadow"
    id 'com.matthewprenger.cursegradle' version "$cursegradle"
    id "com.github.ben-manes.versions" version "$updater"
}

apply from: "dependencies.gradle"  // libs.*

logger.lifecycle("""
    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    Building Gunpowder
    Version: $project.gunpowder_version
    Minecraft Version: $project.minecraft
    Fabric-Loader Version: $project.fabric_loader

    Using:
    Fabric-API Version: $project.fabric_api
    PlayerAbilityLib Version: $project.playerabilitylib
    
    Output files will be in /build/libs
    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
""")


group = "io.github.gunpowder"
version = project.gunpowder_version + "+" + project.minecraft

// Project config

allprojects { project ->
    apply plugin: 'fabric-loom'
    apply plugin: 'maven-publish'
    apply plugin: 'org.jetbrains.kotlin.jvm'
//    apply plugin: 'org.cadixdev.licenser'
    apply plugin: 'com.github.johnrengelman.shadow'

    project.version = rootProject.version
    project.group = rootProject.group
    project.setBuildDir(rootProject.getBuildDir())

//    license {
//        header = rootProject.file('LICENSE')
//        include '**/*.java'
//        include '**/*.kt'
//        style.java = 'BLOCK_COMMENT'
//        style.kt = 'BLOCK_COMMENT'
//    }

    configurations {
        dev
        compileOnly.extendsFrom shade
        compileOnly.extendsFrom shadeSource
        modCompileOnly.extendsFrom modShade
    }

    jar {
        enabled = false
    }

    remapJar {
        enabled = false
    }

    shadowJar {
        enabled = true
        // Only shadow shade/modShade
        configurations = [project.configurations.shade, project.configurations.modShade]
        classifier = "dev"
        // relocate "org.jetbrains.exposed", "shadow.jetbrains.exposed"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from project.sourceSets.main.allSource.srcDirs
        // TODO: Add relocated exposed maybe?
    }

    task remapShadowJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: shadowJar) {
        afterEvaluate {
            input = file("${project.buildDir}/libs/${archivesBaseName}-${rootProject.version}-dev.jar")
            archiveName = "${project.archivesBaseName}-${project.version}.jar"
            addNestedDependencies = true
            remapAccessWidener = true
        }
    }

    task remapMavenJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: shadowJar) {
        //afterEvaluate {
            input = file("${project.buildDir}/libs/${project.name}-${rootProject.version}-dev.jar")
            archiveName = "${project.archivesBaseName}-${project.version}-maven.jar"
            addNestedDependencies = false
            remapAccessWidener = true
        //}
    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "Jitpack"
            url = "https://jitpack.io"
        }
        maven {
            name = "Ladysnake Libs"
            url = "https://dl.bintray.com/ladysnake/libs"
        }
        maven {
            name = "HavenKing"
            url = "https://hephaestus.dev/release"
        }
    }

    dependencies {
        // Kotlin Stdlib
        minecraft(libs.minecraft) {
            transitive = false
        }
        mappings libs.yarn
        modImplementation libs.fabric_loader

        // Hard Dependencies
        modImplementation libs.fabric_api
        modImplementation libs.fabric_language_kotlin

        // Database
        modImplementation (libs.exposed_core) {
            transitive = false
        }
        modImplementation (libs.exposed_jdbc) {
            transitive = false
        }
        modImplementation (libs.exposed_java_time) {
            transitive = false
        }
        modRuntime libs.exposed_core
        modRuntime libs.exposed_jdbc
        modRuntime libs.exposed_java_time

        // Database drivers
        modImplementation libs.postgresql
        modImplementation libs.mysql_connector_java
        modImplementation libs.sqlite_jdbc

        // Configs
        modImplementation libs.jackson_core
        modImplementation libs.jackson_kotlin
        modImplementation libs.jackson_yaml
        modImplementation libs.jackson_databind
        modImplementation libs.jackson_annotations
        modImplementation libs.snakeyaml
        modImplementation libs.slf4j

        // Dependency Injection
        modImplementation libs.guice
        modImplementation libs.javax_inject
        modImplementation libs.aop

        // We use checker for annotations
        modImplementation libs.checker_qual

        // Hermes
        modImplementation libs.hermes

        // TODO: Permissions
    }

    // Set version in fabric.mod.json
    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    build.dependsOn(shadowJar, remapShadowJar, sourcesJar, remapSourcesJar)
    rootProject.publish.dependsOn(shadowJar, remapMavenJar, sourcesJar, remapSourcesJar)

    // Fix some warnings
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
    compileKotlin.kotlinOptions.jvmTarget = JavaVersion.VERSION_16
    compileKotlin.kotlinOptions.useIR = true
    compileKotlin.kotlinOptions.freeCompilerArgs = ['-Xjvm-default=compatibility']

}

dependencies {
    subprojects.each {
        shade project(path: ":${it.name}", configuration: 'shadow')
    }

    // Runtime Only Dependencies
    modRuntime libs.fabric_language_kotlin
    modRuntime libs.fabric_api
    modRuntime libs.hermes
}

subprojects {
    runClient {
        enabled = false
    }
    runServer {
        enabled = false
    }
}

jar {
    enabled = false
}

sourcesJar {
    enabled = false
}

shadowJar {
    enabled = false
}

remapJar {
    enabled = false
}

remapSourcesJar {
    enabled = false
}

remapShadowJar {
    enabled = false
}

remapMavenJar {
    enabled = false
}


if (file('secrets.gradle').exists()) {
    apply from: 'secrets.gradle'
    // project.ext.apiKey = cf token
    // project.ext.mavenToken = maven token

    // Maven publish
    subprojects { p ->
        publishing {
            repositories {
                maven {
                    url = "https://maven.martmists.com/releases"
                    credentials {
                        username = 'admin'
                        password = project.mavenToken
                    }
                }
            }

            publications {
                mavenJava(MavenPublication) {
                    afterEvaluate {
                        artifact source: file("${p.buildDir}/libs/${p.name}-${rootProject.version}-maven.jar"), classifier: ''
                        artifact source: file("${p.buildDir}/libs/${p.name}-${rootProject.version}-dev.jar"), classifier: 'dev'
                        artifact source: file("${p.buildDir}/libs/${p.name}-${rootProject.version}-sources.jar"), classifier: 'sources'
                        artifact source: file("${p.buildDir}/libs/${p.name}-${rootProject.version}-sources-dev.jar"), classifier: 'sources-dev'
                    }
                }
            }
        }
    }

    // Curseforge upload
    curseforge {

        apiKey = project.cfToken
        project {
            id = "350123"
            releaseType = "release"
            changelogType = "markdown"
            changelog = file("CHANGELOG.md").readLines().join("\n").split("---")[0]
            addGameVersion project.minecraft.split("-")[0]
            addGameVersion "Fabric"
            addGameVersion "Java 16"

            relations {
                requiredDependency("fabric-api")
                requiredDependency("fabric-language-kotlin")
                for (String module : project.gunpowder_modules.split(',')) {
                    optionalDependency(module.replace(" ", ""))
                }
            }

            mainArtifact file("${project.buildDir}/libs/gunpowder-base-${project.version}.jar")

            afterEvaluate {
                uploadTask.dependsOn(":gunpowder-base:remapShadowJar")
            }
        }
        options {
            forgeGradleIntegration = false
        }
    }

}

